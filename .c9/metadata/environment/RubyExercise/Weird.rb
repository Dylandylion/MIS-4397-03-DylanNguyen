{"filter":false,"title":"Weird.rb","tooltip":"/RubyExercise/Weird.rb","undoManager":{"mark":4,"position":4,"stack":[[{"start":{"row":0,"column":0},"end":{"row":31,"column":7},"action":"insert","lines":["def test_room()","    gold = Room.new(\"GoldRoom\",","    \"\"\"This room has gold in it you can grab. There's a","    door to the north.\"\"\")","    assert_equal(gold.name, \"GoldRoom\")","    assert_equal(gold.paths, {})","    end","    ","    def test_room_paths()","   ","    center = Room.new(\"Center\", \"Test room in the center.\")","    north = Room.new(\"North\", \"Test room in the north.\")","    south = Room.new(\"South\", \"Test room in the south.\")","    ","    center.add_paths({:north => north, :south => south})","    assert_equal(center.go(:north), north)","    assert_equal(center.go(:south), south)","    end","    ","    def test_map()","    start = Room.new(\"Start\", \"You can go west and down a hole.\")","    west = Room.new(\"Trees\", \"There are trees here, you can go east.\")","    down = Room.new(\"Dungeon\", \"It's dark down here, you can go up.\")","    ","    start.add_paths({:west => west, :down => down})","    west.add_paths({:east => start})","    down.add_paths({:up => start})","    ","    assert_equal(start.go(:west), west)","    assert_equal(start.go(:west).go(:east), start)","    assert_equal(start.go(:down).go(:up), start)","    end"],"id":1}],[{"start":{"row":8,"column":24},"end":{"row":8,"column":25},"action":"insert","lines":["t"],"id":2},{"start":{"row":8,"column":25},"end":{"row":8,"column":26},"action":"insert","lines":["e"]},{"start":{"row":8,"column":26},"end":{"row":8,"column":27},"action":"insert","lines":["s"]},{"start":{"row":8,"column":27},"end":{"row":8,"column":28},"action":"insert","lines":["t"]},{"start":{"row":8,"column":28},"end":{"row":8,"column":29},"action":"insert","lines":["_"]},{"start":{"row":8,"column":29},"end":{"row":8,"column":30},"action":"insert","lines":["r"]},{"start":{"row":8,"column":30},"end":{"row":8,"column":31},"action":"insert","lines":["o"]},{"start":{"row":8,"column":31},"end":{"row":8,"column":32},"action":"insert","lines":["o"]},{"start":{"row":8,"column":32},"end":{"row":8,"column":33},"action":"insert","lines":["m"]}],[{"start":{"row":0,"column":0},"end":{"row":1,"column":0},"action":"insert","lines":["",""],"id":3}],[{"start":{"row":0,"column":0},"end":{"row":0,"column":30},"action":"insert","lines":["require_relative '../lib/ex47'"],"id":4}],[{"start":{"row":0,"column":30},"end":{"row":1,"column":0},"action":"insert","lines":["",""],"id":5}],[{"start":{"row":28,"column":3},"end":{"row":28,"column":4},"action":"insert","lines":[" "],"id":10}],[{"start":{"row":17,"column":4},"end":{"row":17,"column":7},"action":"remove","lines":["   "],"id":9},{"start":{"row":17,"column":4},"end":{"row":18,"column":0},"action":"insert","lines":["",""]}],[{"start":{"row":27,"column":11},"end":{"row":27,"column":12},"action":"insert","lines":["m"],"id":8}],[{"start":{"row":27,"column":3},"end":{"row":27,"column":4},"action":"insert","lines":["t"],"id":7},{"start":{"row":27,"column":4},"end":{"row":27,"column":5},"action":"insert","lines":["e"]},{"start":{"row":27,"column":5},"end":{"row":27,"column":6},"action":"insert","lines":["s"]},{"start":{"row":27,"column":6},"end":{"row":27,"column":7},"action":"insert","lines":["t"]},{"start":{"row":27,"column":7},"end":{"row":27,"column":8},"action":"insert","lines":["_"]},{"start":{"row":27,"column":8},"end":{"row":27,"column":9},"action":"insert","lines":["r"]},{"start":{"row":27,"column":9},"end":{"row":27,"column":10},"action":"insert","lines":["o"]},{"start":{"row":27,"column":10},"end":{"row":27,"column":11},"action":"insert","lines":["o"]}],[{"start":{"row":0,"column":0},"end":{"row":1,"column":0},"action":"remove","lines":["require_relative '../lib/ex47'",""],"id":6},{"start":{"row":0,"column":0},"end":{"row":17,"column":7},"action":"insert","lines":["class Room","    attr_accessor :name, :description, :paths","    ","    def initialize (name,description)","        @name = name","        @description = description","        @paths = {}","    end","    ","    def go(direction)","        @paths[direction]","    end","    ","    def add_paths(paths)","        @paths.update(paths)","    end","","end    "]}]]},"ace":{"folds":[],"scrolltop":0,"scrollleft":0,"selection":{"start":{"row":0,"column":30},"end":{"row":1,"column":0},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":0},"timestamp":1570593305962,"hash":"ab8562d9335dc5b8ff7d081edc94f00c0d95fc27"}